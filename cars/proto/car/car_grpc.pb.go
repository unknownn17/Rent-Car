// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.12
// source: car.proto

package car

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	CarService_CreateCar_FullMethodName = "/CarService/CreateCar"
	CarService_GetCars_FullMethodName   = "/CarService/GetCars"
	CarService_GetCar_FullMethodName    = "/CarService/GetCar"
	CarService_RemoveCar_FullMethodName = "/CarService/RemoveCar"
)

// CarServiceClient is the client API for CarService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CarServiceClient interface {
	CreateCar(ctx context.Context, in *CreateCarReq, opts ...grpc.CallOption) (*CreateCarResponse, error)
	GetCars(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (CarService_GetCarsClient, error)
	GetCar(ctx context.Context, in *GetCarReq, opts ...grpc.CallOption) (*CreateCarResponse, error)
	RemoveCar(ctx context.Context, in *GetCarReq, opts ...grpc.CallOption) (*DeleteResp, error)
}

type carServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCarServiceClient(cc grpc.ClientConnInterface) CarServiceClient {
	return &carServiceClient{cc}
}

func (c *carServiceClient) CreateCar(ctx context.Context, in *CreateCarReq, opts ...grpc.CallOption) (*CreateCarResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCarResponse)
	err := c.cc.Invoke(ctx, CarService_CreateCar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carServiceClient) GetCars(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (CarService_GetCarsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CarService_ServiceDesc.Streams[0], CarService_GetCars_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &carServiceGetCarsClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CarService_GetCarsClient interface {
	Recv() (*CreateCarResponse, error)
	grpc.ClientStream
}

type carServiceGetCarsClient struct {
	grpc.ClientStream
}

func (x *carServiceGetCarsClient) Recv() (*CreateCarResponse, error) {
	m := new(CreateCarResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *carServiceClient) GetCar(ctx context.Context, in *GetCarReq, opts ...grpc.CallOption) (*CreateCarResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCarResponse)
	err := c.cc.Invoke(ctx, CarService_GetCar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carServiceClient) RemoveCar(ctx context.Context, in *GetCarReq, opts ...grpc.CallOption) (*DeleteResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResp)
	err := c.cc.Invoke(ctx, CarService_RemoveCar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CarServiceServer is the server API for CarService service.
// All implementations must embed UnimplementedCarServiceServer
// for forward compatibility
type CarServiceServer interface {
	CreateCar(context.Context, *CreateCarReq) (*CreateCarResponse, error)
	GetCars(*EmptyReq, CarService_GetCarsServer) error
	GetCar(context.Context, *GetCarReq) (*CreateCarResponse, error)
	RemoveCar(context.Context, *GetCarReq) (*DeleteResp, error)
	mustEmbedUnimplementedCarServiceServer()
}

// UnimplementedCarServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCarServiceServer struct {
}

func (UnimplementedCarServiceServer) CreateCar(context.Context, *CreateCarReq) (*CreateCarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCar not implemented")
}
func (UnimplementedCarServiceServer) GetCars(*EmptyReq, CarService_GetCarsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCars not implemented")
}
func (UnimplementedCarServiceServer) GetCar(context.Context, *GetCarReq) (*CreateCarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCar not implemented")
}
func (UnimplementedCarServiceServer) RemoveCar(context.Context, *GetCarReq) (*DeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCar not implemented")
}
func (UnimplementedCarServiceServer) mustEmbedUnimplementedCarServiceServer() {}

// UnsafeCarServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CarServiceServer will
// result in compilation errors.
type UnsafeCarServiceServer interface {
	mustEmbedUnimplementedCarServiceServer()
}

func RegisterCarServiceServer(s grpc.ServiceRegistrar, srv CarServiceServer) {
	s.RegisterService(&CarService_ServiceDesc, srv)
}

func _CarService_CreateCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCarReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServiceServer).CreateCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CarService_CreateCar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServiceServer).CreateCar(ctx, req.(*CreateCarReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarService_GetCars_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CarServiceServer).GetCars(m, &carServiceGetCarsServer{ServerStream: stream})
}

type CarService_GetCarsServer interface {
	Send(*CreateCarResponse) error
	grpc.ServerStream
}

type carServiceGetCarsServer struct {
	grpc.ServerStream
}

func (x *carServiceGetCarsServer) Send(m *CreateCarResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CarService_GetCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCarReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServiceServer).GetCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CarService_GetCar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServiceServer).GetCar(ctx, req.(*GetCarReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarService_RemoveCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCarReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServiceServer).RemoveCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CarService_RemoveCar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServiceServer).RemoveCar(ctx, req.(*GetCarReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CarService_ServiceDesc is the grpc.ServiceDesc for CarService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CarService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CarService",
	HandlerType: (*CarServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCar",
			Handler:    _CarService_CreateCar_Handler,
		},
		{
			MethodName: "GetCar",
			Handler:    _CarService_GetCar_Handler,
		},
		{
			MethodName: "RemoveCar",
			Handler:    _CarService_RemoveCar_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetCars",
			Handler:       _CarService_GetCars_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "car.proto",
}
